FROM ubuntu:22.04 as clang_dev
ARG APPNAME=risb
ARG LLVM=15

RUN apt-get update \
  && apt-get install -y lsb-release wget software-properties-common \
  && wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh \
  && chmod +x /tmp/llvm.sh \
  && /tmp/llvm.sh ${LLVM} \
  && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    clang-${LLVM} \
    cmake \
    g++-12 \
    gfortran \
    git \
    vim \
    lldb-${LLVM} \
    libclang-${LLVM}-dev \
    libc++-${LLVM}-dev \
    libc++abi-${LLVM}-dev \
    libomp-${LLVM}-dev \
    hdf5-tools \
    libfftw3-dev \
    libgfortran5 \
    libgmp-dev \
    libhdf5-dev \
    libblas-dev \
    liblapack-dev \
    #libopenblas-dev \
    libboost-dev \
    libopenmpi-dev \
    openmpi-bin \
    openmpi-common \
    python3-clang-${LLVM} \
    python3-dev \
    python3-pip \
    python3-mako \
    python3-mpi4py \
    python3-h5py \
    python3-numpy \
    python3-scipy \
  && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM} 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM} --slave /usr/bin/clang-cpp clang-cpp /usr/bin/clang-cpp-${LLVM}

# Setup non-root user and environment
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV SRC=/src/ \
    BUILD=/build/ \
    OMP_NUM_THREADS=4 \
    NCORES=4 \
    PYTHON_VERSION=3.10 \
    CC=clang-${LLVM} CXX=clang++-${LLVM} CXXFLAGS="-stdlib=libc++" \
    CPLUS_INCLUDE_PATH=/usr/include/openmpi:/usr/include/hdf5/serial/:$CPLUS_INCLUDE_PATH

# Install TRIQS (they do not have TRIQS 3.2 deb file yet)
#FROM clang_dev as build_amd64
#ONBUILD RUN DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common apt-transport-https curl \
#  && . /etc/lsb-release \
#  && curl -L https://users.flatironinstitute.org/~ccq/triqs3/$DISTRIB_CODENAME/public.gpg | gpg --dearmor -o /usr/share/keyrings/triqs3.gpg \
#  && echo "deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/triqs3.gpg] https://users.flatironinstitute.org/~ccq/triqs3/$DISTRIB_CODENAME/ /" | tee /etc/apt/sources.list.d/triqs3.list > /dev/null \
#  && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y triqs

# Install TRIQS from source if on apple arm
FROM clang_dev as build_arm64
ONBUILD ARG PACKAGE=triqs
ONBUILD WORKDIR $BUILD/$PACKAGE
ONBUILD RUN git clone https://github.com/TRIQS/$PACKAGE --depth 1 $SRC/$PACKAGE \
  && mkdir -p $BUILD/$PACKAGE \
  && cmake $SRC/$PACKAGE -DCMAKE_INSTALL_PREFIX=/usr/ -DBuild_Documentation=OFF -DBuild_Tests=OFF \
  && make -j$NCORES || make -j1 VERBOSE=1
ONBUILD RUN make install
ONBUILD RUN rm -rf $SRC/$PACKAGE \
  && rm -rf $BUILD/$PACKAGE
ONBUILD ENV PYTHONPATH=/usr/lib/python$PYTHON_VERSION/site-packages/:$PYTHONPATH

# Continue build (BUILDARCH inbuilt Docker variable that we first expose to the script)
ARG BUILDARCH
#FROM build_${BUILDARCH}
FROM build_arm64

# Install any other software we need
RUN pip install --upgrade pip \
  && pip install matplotlib
# nox mypy

# Install library
WORKDIR $BUILD/$APPNAME
COPY . $SRC/$APPNAME
RUN cp -asT $SRC/$APPNAME/ .
RUN pip install -e .[test,docs]

# Build documentation
#RUN nox -s buld_api_docs
#CMD nox -s docs -- --serve
EXPOSE 8000
ENV APPNAME=$APPNAME
RUN sphinx-apidoc -o $BUILD/$APPNAME/docs/api --module-first --no-toc --force --separate src/risb
CMD sphinx-autobuild -b html --host 0.0.0.0 --port 8000 -n -T $BUILD/$APPNAME/docs $BUILD/$APPNAME/docs/_build

# I wish autodoc2 made better API documementation !